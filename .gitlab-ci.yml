stages:
  - Build
  - Package

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
       if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/staging/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/integration/cross-cloud.yml"
       else
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/master/cross-cloud.yml"
       fi
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - >
    if ruby -v ; then
        echo 'Ruby found, not using rvm'
        cp -a /opt/local/dashboard /dashboard 
        pushd /dashboard
        source /opt/local/.env
        bundle install
        ./bin/update_dashboard
        popd
    else
       source /opt/local/etc/rvmrc
       source /opt/local/etc/profile.d/rvm.sh
       cp -a /opt/local/dashboard /dashboard
       pushd /dashboard
       source /opt/local/.env
       ./bin/update_dashboard
       popd
    fi

compile:
  stage: Build
  image: "arm64v8/ruby:stretch"
  script:
    # Enable binfmt_misc 
    # - docker run --privileged linuxkit/binfmt:v0.6 - Already enabled on host runner.
    - apt update && apt -y install qemu-user qemu-user-static
    - ruby -v                                   # Print out ruby version for debugging
    - gem install bundler                       # Bundler is not installed with the image
    - sed -i "19s/.*/  VERSION = '$CI_PIPELINE_ID.aarch64'/" lib/fluent/version.rb
    - bundle install -j $(nproc) --path vendor  # Install dependencies into ./vendor/ruby
    - bundle exec rake build
    # - bundle exec rake test TESTOPTS=-v || true
    - mv pkg/*gem .
    - curl -F package=@fluentd-$CI_PIPELINE_ID.aarch64.gem https://$GEMFURY@push.fury.io/cncf/

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 4 weeks
    paths:
      - "*gem"
      - "vendor"
      - Gemfile.lock

container:
  stage: Package
  image: crosscloudci/debian-docker
  dependencies: 
    - compile
  script:
    - apt update && apt -y install curl jq git make
    - mkdir ./fluentd-base ; git clone https://github.com/denverwilliams/fluentd-docker-image.git -b cross-cloud ./fluentd-base
    - cp -a ./vendor ./fluentd-base/v1.0/alpine/ ; cp ./fluent*.gem ./fluentd-base/v1.0/alpine/fluent.gem ; cp ./Gemfile ./fluentd-base/v1.0/alpine/Gemfile ; cp ./Gemfile.lock ./fluentd-base/v1.0/alpine/Gemfile.lock
    - cd ./fluentd-base ; make image IMAGE_NAME="$CI_REGISTRY_IMAGE" DOCKERFILE=v1.0/alpine VERSION="$CI_COMMIT_SHA" ; cd -
    - mkdir ./fluentd-daemonset ; git clone https://github.com/denverwilliams/fluentd-kubernetes-daemonset.git -b cross-cloud ./fluentd-daemonset
    - cd ./fluentd-daemonset ; make image BASE_IMAGE="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" IMAGE_NAME="$CI_REGISTRY_IMAGE/daemonset" DOCKERFILE=v0.12/alpine-cloudwatch VERSION="$CI_COMMIT_SHA" ; cd -
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/daemonset:$CI_COMMIT_SHA" 
    - echo export IMAGE_ARGS=\"--set image=$CI_REGISTRY_IMAGE/daemonset\" | tee release.env
    - echo export TAG_ARGS=\"--set imageTag=$CI_COMMIT_SHA\" | tee -a release.env
    - cat release.env

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 4 weeks
    paths:
      - release.env
